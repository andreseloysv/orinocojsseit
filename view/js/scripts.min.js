'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Attribute = function () {
    function Attribute(key, value, labels) {
        _classCallCheck(this, Attribute);

        this.key = key;
        this.labels = labels;
        if (typeof value === "undefined") {
            this.value = value;
        } else {
            this.set(value);
        }
    }

    _createClass(Attribute, [{
        key: "set",
        value: function set(value) {
            this.value = value;
            var labelsListSize = this.labels.length;
            for (var i = 0; i < labelsListSize; i++) {
                this.labels[i].text(value);
            }
        }
    }, {
        key: "get",
        value: function get(key) {
            return this.value;
        }
    }]);

    return Attribute;
}();

var Model = function () {
    function Model(wrapper, template) {
        _classCallCheck(this, Model);

        this.wrapper = wrapper;
        this.template = template;
        this.attributes = [];
        this.mapAttributes = [];
    }

    _createClass(Model, [{
        key: "validaDuplicateKeyAttribute",
        value: function validaDuplicateKeyAttribute(key) {
            if (typeof this.mapAttributes[key] === "undefined") {
                return true;
            } else {
                throw "Attribute key duplicate";
            }
        }
    }, {
        key: "validaExistKeyAttribute",
        value: function validaExistKeyAttribute(key) {
            if (typeof this.mapAttributes[key] === "undefined") {
                throw "Attribute key undefined";
            }
        }
    }, {
        key: "addAttribute",
        value: function addAttribute(key, value, label) {
            try {
                this.validaDuplicateKeyAttribute(key);
                var attribute = new Attribute(key, value, label);
                this.attributes.push(attribute);
                this.mapAttributes[key] = this.mapAttributes.length;
            } catch (error) {
                console.log("error: ", error);
            }
        }
    }, {
        key: "getAttribute",
        value: function getAttribute(key) {
            try {
                this.validaExistKeyAttribute(key);
                return this.attributes[this.mapAttributes[key]];
            } catch (error) {
                var message = "error: " + error;
                console.log(message);
                return message;
            }
        }
    }, {
        key: "setAttribute",
        value: function setAttribute(key, value) {
            try {
                this.validaExistKeyAttribute(key);
                var atribute = this.attributes[this.mapAttributes[key]];
                atribute.set(value);
            } catch (error) {
                var message = "error: " + error;
                console.log(message);
                return message;
            }
        }
    }]);

    return Model;
}();

jQuery(document).ready(function () {
    var orinoco;
    jQuery(".create-project").click(function (event) {
        event.preventDefault();
        orinoco = new Project(jQuery("#first-example"), jQuery(".templates>.project"), 'Project Orinoco js');
    });
    var newTodoList = new TodoList(jQuery("#second-example"), jQuery(".templates>.todo-list>.todo-element"), jQuery(".todo-container"));

    jQuery('a.scroll').click(function () {
        console.log("hola");
        jQuery('html, body').animate({
            scrollTop: jQuery(jQuery.attr(this, 'href')).offset().top
        }, 500);

        return false;
    });
});
'use strict';

var Project = function (_Model) {
    _inherits(Project, _Model);

    function Project(wrapper, template, name) {
        _classCallCheck(this, Project);

        var _this = _possibleConstructorReturn(this, (Project.__proto__ || Object.getPrototypeOf(Project)).call(this, wrapper, template));

        _this.wrapper.append(_this.template);
        var titleLabels = [_this.template.find(".name"), _this.template.find(".footer")];
        _this.addAttribute("name", name, titleLabels);
        _this.nameInput = _this.template.find(".name-input");
        _this.nameInput.focus();
        _this.eventHandler();
        return _this;
    }

    _createClass(Project, [{
        key: "updateProjectName",
        value: function updateProjectName(event) {
            this.setAttribute("name", this.nameInput.val());
        }
    }, {
        key: "eventHandler",
        value: function eventHandler() {
            this.nameInput.on("input", this.updateProjectName.bind(this));
        }
    }]);

    return Project;
}(Model);

var TodoList = function (_Model2) {
    _inherits(TodoList, _Model2);

    function TodoList(wrapper, template, bigWrapper) {
        _classCallCheck(this, TodoList);

        var _this2 = _possibleConstructorReturn(this, (TodoList.__proto__ || Object.getPrototypeOf(TodoList)).call(this, wrapper, template));

        _this2.bigWrapper = bigWrapper;
        _this2.addTaskInput = _this2.bigWrapper.find(".add-task-input");
        _this2.addTaskButton = _this2.bigWrapper.find(".add-task");
        _this2.eventHandler();
        return _this2;
    }

    _createClass(TodoList, [{
        key: "addTask",
        value: function addTask(input, event) {
            switch (input) {
                case "click":
                    this.wrapper.append(this.template.clone().text(this.addTaskInput.val()));
                    this.addTaskInput.val("");
                    this.addTaskInput.focus();
                    break;
                case "keypress":
                    if (event.keyCode == 13) {
                        this.wrapper.append(this.template.clone().text(this.addTaskInput.val()));
                        this.addTaskInput.val("");
                    }
                    break;
                default:
                    break;
            }
        }
    }, {
        key: "eventHandler",
        value: function eventHandler() {
            this.addTaskButton.on("touchstart click", this.addTask.bind(this, "click"));
            this.addTaskInput.on("keypress", this.addTask.bind(this, "keypress"));
        }
    }]);

    return TodoList;
}(Model);

(function () {
    var method;
    var noop = function noop() {};
    var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'];
    var length = methods.length;
    var console = window.console = window.console || {};

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
})();

jQuery(window).resize(function () {});

jQuery(window).scroll(function () {});